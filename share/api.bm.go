// Code generated by protoc-gen-bm v0.1, DO NOT EDIT.
// source: api.proto

/*
Package api is a generated blademaster stub package.
This code was generated with kratos/tool/protobuf/protoc-gen-bm v0.1.

package 命名使用 {appid}.{version} 的方式, version 形如 v1, v2 ..

It is generated from these files:
	api.proto
*/
package api

import (
	"context"

	bm "github.com/go-kratos/kratos/pkg/net/http/blademaster"
	"github.com/go-kratos/kratos/pkg/net/http/blademaster/binding"
)
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

// to suppressed 'imported but not used warning'
var _ *bm.Context
var _ context.Context
var _ binding.StructValidator

var PathSharePing = "/share.service.v1.share/Ping"
var PathShareUpdateShare = "/share.service.v1.share/UpdateShare"
var PathShareLoadShare = "/share.service.v1.share/LoadShare"
var PathShareUpdateGameArena = "/share.service.v1.share/UpdateGameArena"
var PathShareDeleteGameArena = "/share.service.v1.share/DeleteGameArena"
var PathShareLoadGameAvoidInjury = "/share.service.v1.share/LoadGameAvoidInjury"
var PathShareUpdateKeyValues = "/share.service.v1.share/UpdateKeyValues"
var PathShareLoadValues = "/share.service.v1.share/LoadValues"
var PathShareSetExpire = "/share.service.v1.share/SetExpire"
var PathShareLoadExpire = "/share.service.v1.share/LoadExpire"
var PathShareIncrGameData = "/share.service.v1.share/IncrGameData"
var PathShareLoadGameData = "/share.service.v1.share/LoadGameData"
var PathShareSetAdd = "/share.service.v1.share/SetAdd"
var PathShareSetDel = "/share.service.v1.share/SetDel"
var PathShareSetMembers = "/share.service.v1.share/SetMembers"
var PathShareSetRandom = "/share.service.v1.share/SetRandom"
var PathShareSetIsMember = "/share.service.v1.share/SetIsMember"
var PathShareSetDelAll = "/share.service.v1.share/SetDelAll"
var PathShareHSetUpdate = "/share.service.v1.share/HSetUpdate"
var PathShareHSetLoad = "/share.service.v1.share/HSetLoad"
var PathShareHSetDel = "/share.service.v1.share/HSetDel"
var PathShareHSetUpdateValues = "/share.service.v1.share/HSetUpdateValues"
var PathShareHSetLoadValues = "/share.service.v1.share/HSetLoadValues"
var PathShareHSetDelValues = "/share.service.v1.share/HSetDelValues"
var PathShareHSetDelHash = "/share.service.v1.share/HSetDelHash"
var PathShareHSetAdd = "/share.service.v1.share/HSetAdd"
var PathShareHSetIncr = "/share.service.v1.share/HSetIncr"
var PathShareHListAdd = "/share.service.v1.share/HListAdd"
var PathShareHListAddLast = "/share.service.v1.share/HListAddLast"
var PathShareHListDel = "/share.service.v1.share/HListDel"
var PathShareHListDelAll = "/share.service.v1.share/HListDelAll"
var PathShareHListLoadAll = "/share.service.v1.share/HListLoadAll"
var PathShareHListLoadRange = "/share.service.v1.share/HListLoadRange"
var PathShareHListPopFirst = "/share.service.v1.share/HListPopFirst"
var PathShareHListPopLast = "/share.service.v1.share/HListPopLast"
var PathShareZSetLoadRange = "/share.service.v1.share/ZSetLoadRange"
var PathShareZSetLoadRevRange = "/share.service.v1.share/ZSetLoadRevRange"
var PathShareZSetGetScore = "/share.service.v1.share/ZSetGetScore"
var PathShareZSetUpdateScore = "/share.service.v1.share/ZSetUpdateScore"
var PathShareZSetDel = "/share.service.v1.share/ZSetDel"
var PathShareZSetDelAll = "/share.service.v1.share/ZSetDelAll"
var PathShareZSetGetRank = "/share.service.v1.share/ZSetGetRank"
var PathShareZSetGetRevRank = "/share.service.v1.share/ZSetGetRevRank"
var PathShareZSetRefreshRank = "/share.service.v1.share/ZSetRefreshRank"

// ShareBMServer is the server API for Share service.
type ShareBMServer interface {
	Ping(ctx context.Context, req *google_protobuf1.Empty) (resp *google_protobuf1.Empty, err error)

	// 共享数据
	UpdateShare(ctx context.Context, req *UpdateKeyValuesReq) (resp *CommonResp, err error)

	LoadShare(ctx context.Context, req *LoadValuesReq) (resp *LoadValuesResp, err error)

	UpdateGameArena(ctx context.Context, req *UpdateGameArenaReq) (resp *UpdateGameArenaResp, err error)

	DeleteGameArena(ctx context.Context, req *DeleteGameArenaReq) (resp *DeleteGameArenaResp, err error)

	LoadGameAvoidInjury(ctx context.Context, req *LoadGameAvoidInjuryReq) (resp *LoadGameAvoidInjuryResp, err error)

	UpdateKeyValues(ctx context.Context, req *UpdateKeyValuesReq) (resp *CommonResp, err error)

	LoadValues(ctx context.Context, req *LoadValuesReq) (resp *LoadValuesResp, err error)

	SetExpire(ctx context.Context, req *SetExpireReq) (resp *CommonResp, err error)

	LoadExpire(ctx context.Context, req *LoadExpireReq) (resp *LoadExpireResp, err error)

	// redis
	IncrGameData(ctx context.Context, req *IncrGameDataReq) (resp *CommonResp, err error)

	LoadGameData(ctx context.Context, req *LoadGameDataReq) (resp *LoadGameDataResp, err error)

	SetAdd(ctx context.Context, req *SetReq) (resp *CommonResp, err error)

	SetDel(ctx context.Context, req *SetReq) (resp *CommonResp, err error)

	SetMembers(ctx context.Context, req *SetReq) (resp *SetMembersResp, err error)

	SetRandom(ctx context.Context, req *SetRandomReq) (resp *SetRandomResp, err error)

	SetIsMember(ctx context.Context, req *SetReq) (resp *SetIsMemberResp, err error)

	SetDelAll(ctx context.Context, req *SetReq) (resp *CommonResp, err error)

	HSetUpdate(ctx context.Context, req *HSetUpdateReq) (resp *CommonResp, err error)

	HSetLoad(ctx context.Context, req *HSetLoadReq) (resp *HSetLoadResp, err error)

	HSetDel(ctx context.Context, req *HSetDelReq) (resp *CommonResp, err error)

	HSetUpdateValues(ctx context.Context, req *HSetUpdateValuesReq) (resp *CommonResp, err error)

	HSetLoadValues(ctx context.Context, req *HSetLoadValuesReq) (resp *HSetLoadValuesResp, err error)

	HSetDelValues(ctx context.Context, req *HSetDelValuesReq) (resp *CommonResp, err error)

	HSetDelHash(ctx context.Context, req *HSetDelHashReq) (resp *CommonResp, err error)

	HSetAdd(ctx context.Context, req *HSetAddReq) (resp *CommonResp, err error)

	HSetIncr(ctx context.Context, req *HSetIncrReq) (resp *CommonResp, err error)

	HListAdd(ctx context.Context, req *HListReq) (resp *CommonResp, err error)

	HListAddLast(ctx context.Context, req *HListReq) (resp *CommonResp, err error)

	HListDel(ctx context.Context, req *HListReq) (resp *CommonResp, err error)

	HListDelAll(ctx context.Context, req *HListReq) (resp *CommonResp, err error)

	HListLoadAll(ctx context.Context, req *HListReq) (resp *HListLoadResp, err error)

	HListLoadRange(ctx context.Context, req *HListLoadRangeReq) (resp *HListLoadResp, err error)

	HListPopFirst(ctx context.Context, req *HListReq) (resp *HListPopResp, err error)

	HListPopLast(ctx context.Context, req *HListReq) (resp *HListPopResp, err error)

	ZSetLoadRange(ctx context.Context, req *ZSetLoadRangeReq) (resp *ZSetLoadRangeResp, err error)

	ZSetLoadRevRange(ctx context.Context, req *ZSetLoadRangeReq) (resp *ZSetLoadRangeResp, err error)

	ZSetGetScore(ctx context.Context, req *ZSetReq) (resp *ZSetGetScoreResp, err error)

	ZSetUpdateScore(ctx context.Context, req *ZSetUpdateScoreReq) (resp *CommonResp, err error)

	ZSetDel(ctx context.Context, req *ZSetReq) (resp *CommonResp, err error)

	ZSetDelAll(ctx context.Context, req *ZSetReq) (resp *CommonResp, err error)

	ZSetGetRank(ctx context.Context, req *ZSetReq) (resp *ZSetGetRankResp, err error)

	ZSetGetRevRank(ctx context.Context, req *ZSetReq) (resp *ZSetGetRankResp, err error)

	ZSetRefreshRank(ctx context.Context, req *ZSetRefreshRankReq) (resp *CommonResp, err error)
}

var ShareSvc ShareBMServer

func sharePing(c *bm.Context) {
	p := new(google_protobuf1.Empty)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := ShareSvc.Ping(c, p)
	c.JSON(resp, err)
}

func shareUpdateShare(c *bm.Context) {
	p := new(UpdateKeyValuesReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := ShareSvc.UpdateShare(c, p)
	c.JSON(resp, err)
}

func shareLoadShare(c *bm.Context) {
	p := new(LoadValuesReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := ShareSvc.LoadShare(c, p)
	c.JSON(resp, err)
}

func shareUpdateGameArena(c *bm.Context) {
	p := new(UpdateGameArenaReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := ShareSvc.UpdateGameArena(c, p)
	c.JSON(resp, err)
}

func shareDeleteGameArena(c *bm.Context) {
	p := new(DeleteGameArenaReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := ShareSvc.DeleteGameArena(c, p)
	c.JSON(resp, err)
}

func shareLoadGameAvoidInjury(c *bm.Context) {
	p := new(LoadGameAvoidInjuryReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := ShareSvc.LoadGameAvoidInjury(c, p)
	c.JSON(resp, err)
}

func shareUpdateKeyValues(c *bm.Context) {
	p := new(UpdateKeyValuesReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := ShareSvc.UpdateKeyValues(c, p)
	c.JSON(resp, err)
}

func shareLoadValues(c *bm.Context) {
	p := new(LoadValuesReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := ShareSvc.LoadValues(c, p)
	c.JSON(resp, err)
}

func shareSetExpire(c *bm.Context) {
	p := new(SetExpireReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := ShareSvc.SetExpire(c, p)
	c.JSON(resp, err)
}

func shareLoadExpire(c *bm.Context) {
	p := new(LoadExpireReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := ShareSvc.LoadExpire(c, p)
	c.JSON(resp, err)
}

func shareIncrGameData(c *bm.Context) {
	p := new(IncrGameDataReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := ShareSvc.IncrGameData(c, p)
	c.JSON(resp, err)
}

func shareLoadGameData(c *bm.Context) {
	p := new(LoadGameDataReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := ShareSvc.LoadGameData(c, p)
	c.JSON(resp, err)
}

func shareSetAdd(c *bm.Context) {
	p := new(SetReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := ShareSvc.SetAdd(c, p)
	c.JSON(resp, err)
}

func shareSetDel(c *bm.Context) {
	p := new(SetReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := ShareSvc.SetDel(c, p)
	c.JSON(resp, err)
}

func shareSetMembers(c *bm.Context) {
	p := new(SetReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := ShareSvc.SetMembers(c, p)
	c.JSON(resp, err)
}

func shareSetRandom(c *bm.Context) {
	p := new(SetRandomReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := ShareSvc.SetRandom(c, p)
	c.JSON(resp, err)
}

func shareSetIsMember(c *bm.Context) {
	p := new(SetReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := ShareSvc.SetIsMember(c, p)
	c.JSON(resp, err)
}

func shareSetDelAll(c *bm.Context) {
	p := new(SetReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := ShareSvc.SetDelAll(c, p)
	c.JSON(resp, err)
}

func shareHSetUpdate(c *bm.Context) {
	p := new(HSetUpdateReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := ShareSvc.HSetUpdate(c, p)
	c.JSON(resp, err)
}

func shareHSetLoad(c *bm.Context) {
	p := new(HSetLoadReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := ShareSvc.HSetLoad(c, p)
	c.JSON(resp, err)
}

func shareHSetDel(c *bm.Context) {
	p := new(HSetDelReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := ShareSvc.HSetDel(c, p)
	c.JSON(resp, err)
}

func shareHSetUpdateValues(c *bm.Context) {
	p := new(HSetUpdateValuesReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := ShareSvc.HSetUpdateValues(c, p)
	c.JSON(resp, err)
}

func shareHSetLoadValues(c *bm.Context) {
	p := new(HSetLoadValuesReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := ShareSvc.HSetLoadValues(c, p)
	c.JSON(resp, err)
}

func shareHSetDelValues(c *bm.Context) {
	p := new(HSetDelValuesReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := ShareSvc.HSetDelValues(c, p)
	c.JSON(resp, err)
}

func shareHSetDelHash(c *bm.Context) {
	p := new(HSetDelHashReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := ShareSvc.HSetDelHash(c, p)
	c.JSON(resp, err)
}

func shareHSetAdd(c *bm.Context) {
	p := new(HSetAddReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := ShareSvc.HSetAdd(c, p)
	c.JSON(resp, err)
}

func shareHSetIncr(c *bm.Context) {
	p := new(HSetIncrReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := ShareSvc.HSetIncr(c, p)
	c.JSON(resp, err)
}

func shareHListAdd(c *bm.Context) {
	p := new(HListReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := ShareSvc.HListAdd(c, p)
	c.JSON(resp, err)
}

func shareHListAddLast(c *bm.Context) {
	p := new(HListReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := ShareSvc.HListAddLast(c, p)
	c.JSON(resp, err)
}

func shareHListDel(c *bm.Context) {
	p := new(HListReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := ShareSvc.HListDel(c, p)
	c.JSON(resp, err)
}

func shareHListDelAll(c *bm.Context) {
	p := new(HListReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := ShareSvc.HListDelAll(c, p)
	c.JSON(resp, err)
}

func shareHListLoadAll(c *bm.Context) {
	p := new(HListReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := ShareSvc.HListLoadAll(c, p)
	c.JSON(resp, err)
}

func shareHListLoadRange(c *bm.Context) {
	p := new(HListLoadRangeReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := ShareSvc.HListLoadRange(c, p)
	c.JSON(resp, err)
}

func shareHListPopFirst(c *bm.Context) {
	p := new(HListReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := ShareSvc.HListPopFirst(c, p)
	c.JSON(resp, err)
}

func shareHListPopLast(c *bm.Context) {
	p := new(HListReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := ShareSvc.HListPopLast(c, p)
	c.JSON(resp, err)
}

func shareZSetLoadRange(c *bm.Context) {
	p := new(ZSetLoadRangeReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := ShareSvc.ZSetLoadRange(c, p)
	c.JSON(resp, err)
}

func shareZSetLoadRevRange(c *bm.Context) {
	p := new(ZSetLoadRangeReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := ShareSvc.ZSetLoadRevRange(c, p)
	c.JSON(resp, err)
}

func shareZSetGetScore(c *bm.Context) {
	p := new(ZSetReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := ShareSvc.ZSetGetScore(c, p)
	c.JSON(resp, err)
}

func shareZSetUpdateScore(c *bm.Context) {
	p := new(ZSetUpdateScoreReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := ShareSvc.ZSetUpdateScore(c, p)
	c.JSON(resp, err)
}

func shareZSetDel(c *bm.Context) {
	p := new(ZSetReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := ShareSvc.ZSetDel(c, p)
	c.JSON(resp, err)
}

func shareZSetDelAll(c *bm.Context) {
	p := new(ZSetReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := ShareSvc.ZSetDelAll(c, p)
	c.JSON(resp, err)
}

func shareZSetGetRank(c *bm.Context) {
	p := new(ZSetReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := ShareSvc.ZSetGetRank(c, p)
	c.JSON(resp, err)
}

func shareZSetGetRevRank(c *bm.Context) {
	p := new(ZSetReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := ShareSvc.ZSetGetRevRank(c, p)
	c.JSON(resp, err)
}

func shareZSetRefreshRank(c *bm.Context) {
	p := new(ZSetRefreshRankReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := ShareSvc.ZSetRefreshRank(c, p)
	c.JSON(resp, err)
}

// RegisterShareBMServer Register the blademaster route
func RegisterShareBMServer(e *bm.Engine, server ShareBMServer) {
	ShareSvc = server
	e.GET("/share.service.v1.share/Ping", sharePing)
	e.GET("/share.service.v1.share/UpdateShare", shareUpdateShare)
	e.GET("/share.service.v1.share/LoadShare", shareLoadShare)
	e.GET("/share.service.v1.share/UpdateGameArena", shareUpdateGameArena)
	e.GET("/share.service.v1.share/DeleteGameArena", shareDeleteGameArena)
	e.GET("/share.service.v1.share/LoadGameAvoidInjury", shareLoadGameAvoidInjury)
	e.GET("/share.service.v1.share/UpdateKeyValues", shareUpdateKeyValues)
	e.GET("/share.service.v1.share/LoadValues", shareLoadValues)
	e.GET("/share.service.v1.share/SetExpire", shareSetExpire)
	e.GET("/share.service.v1.share/LoadExpire", shareLoadExpire)
	e.GET("/share.service.v1.share/IncrGameData", shareIncrGameData)
	e.GET("/share.service.v1.share/LoadGameData", shareLoadGameData)
	e.GET("/share.service.v1.share/SetAdd", shareSetAdd)
	e.GET("/share.service.v1.share/SetDel", shareSetDel)
	e.GET("/share.service.v1.share/SetMembers", shareSetMembers)
	e.GET("/share.service.v1.share/SetRandom", shareSetRandom)
	e.GET("/share.service.v1.share/SetIsMember", shareSetIsMember)
	e.GET("/share.service.v1.share/SetDelAll", shareSetDelAll)
	e.GET("/share.service.v1.share/HSetUpdate", shareHSetUpdate)
	e.GET("/share.service.v1.share/HSetLoad", shareHSetLoad)
	e.GET("/share.service.v1.share/HSetDel", shareHSetDel)
	e.GET("/share.service.v1.share/HSetUpdateValues", shareHSetUpdateValues)
	e.GET("/share.service.v1.share/HSetLoadValues", shareHSetLoadValues)
	e.GET("/share.service.v1.share/HSetDelValues", shareHSetDelValues)
	e.GET("/share.service.v1.share/HSetDelHash", shareHSetDelHash)
	e.GET("/share.service.v1.share/HSetAdd", shareHSetAdd)
	e.GET("/share.service.v1.share/HSetIncr", shareHSetIncr)
	e.GET("/share.service.v1.share/HListAdd", shareHListAdd)
	e.GET("/share.service.v1.share/HListAddLast", shareHListAddLast)
	e.GET("/share.service.v1.share/HListDel", shareHListDel)
	e.GET("/share.service.v1.share/HListDelAll", shareHListDelAll)
	e.GET("/share.service.v1.share/HListLoadAll", shareHListLoadAll)
	e.GET("/share.service.v1.share/HListLoadRange", shareHListLoadRange)
	e.GET("/share.service.v1.share/HListPopFirst", shareHListPopFirst)
	e.GET("/share.service.v1.share/HListPopLast", shareHListPopLast)
	e.GET("/share.service.v1.share/ZSetLoadRange", shareZSetLoadRange)
	e.GET("/share.service.v1.share/ZSetLoadRevRange", shareZSetLoadRevRange)
	e.GET("/share.service.v1.share/ZSetGetScore", shareZSetGetScore)
	e.GET("/share.service.v1.share/ZSetUpdateScore", shareZSetUpdateScore)
	e.GET("/share.service.v1.share/ZSetDel", shareZSetDel)
	e.GET("/share.service.v1.share/ZSetDelAll", shareZSetDelAll)
	e.GET("/share.service.v1.share/ZSetGetRank", shareZSetGetRank)
	e.GET("/share.service.v1.share/ZSetGetRevRank", shareZSetGetRevRank)
	e.GET("/share.service.v1.share/ZSetRefreshRank", shareZSetRefreshRank)
}
