// 定义项目 API 的 proto 文件 可以同时描述 gRPC 和 HTTP API
// protobuf 文件参考:
//  - https://developers.google.com/protocol-buffers/
syntax = "proto3";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/protobuf/empty.proto";
import "google/api/annotations.proto";

// package 命名使用 {appid}.{version} 的方式, version 形如 v1, v2 ..
package share.service.v1;

option go_package = "api";
option (gogoproto.goproto_getters_all) = false;

service share {

  rpc Ping(.google.protobuf.Empty) returns (.google.protobuf.Empty);

  // 共享数据
  rpc UpdateShare(UpdateKeyValuesReq) returns (CommonResp);

  rpc LoadShare(LoadValuesReq) returns (LoadValuesResp);

  rpc UpdateGameArena(UpdateGameArenaReq) returns (UpdateGameArenaResp);

  rpc DeleteGameArena(DeleteGameArenaReq) returns (DeleteGameArenaResp);

  rpc LoadGameAvoidInjury(LoadGameAvoidInjuryReq) returns (LoadGameAvoidInjuryResp);

  rpc UpdateKeyValues(UpdateKeyValuesReq) returns (CommonResp);

  rpc LoadValues(LoadValuesReq) returns (LoadValuesResp);

  rpc SetExpire(SetExpireReq) returns (CommonResp);

  rpc LoadExpire(LoadExpireReq) returns (LoadExpireResp);


  // redis
  rpc IncrGameData(IncrGameDataReq) returns (CommonResp);

  rpc LoadGameData(LoadGameDataReq) returns (LoadGameDataResp);

  rpc SetAdd(SetReq) returns (CommonResp);

  rpc SetDel(SetReq) returns (CommonResp);

  rpc SetMembers(SetReq) returns (SetMembersResp);

  rpc SetRandom(SetRandomReq) returns (SetRandomResp);

  rpc SetIsMember(SetReq) returns (SetIsMemberResp);

  rpc SetDelAll(SetReq) returns (CommonResp);

  rpc HSetUpdate(HSetUpdateReq) returns (CommonResp);

  rpc HSetLoad(HSetLoadReq) returns (HSetLoadResp);

  rpc HSetDel(HSetDelReq) returns (CommonResp);

  rpc HSetUpdateValues(HSetUpdateValuesReq) returns (CommonResp);

  rpc HSetLoadValues(HSetLoadValuesReq) returns (HSetLoadValuesResp);

  rpc HSetDelValues(HSetDelValuesReq) returns (CommonResp);

  rpc HSetDelHash(HSetDelHashReq) returns (CommonResp);

  rpc HSetAdd(HSetAddReq)  returns (CommonResp);

  rpc HSetIncr(HSetIncrReq) returns (CommonResp);

  rpc HListAdd(HListReq) returns (CommonResp);

  rpc HListAddLast(HListReq) returns (CommonResp);

  rpc HListDel(HListReq) returns (CommonResp);

  rpc HListDelAll(HListReq) returns (CommonResp);

  rpc HListLoadAll(HListReq) returns (HListLoadResp);

  rpc HListLoadRange(HListLoadRangeReq) returns (HListLoadResp);

  rpc HListPopFirst(HListReq) returns (HListPopResp);

  rpc HListPopLast(HListReq) returns (HListPopResp);

  rpc ZSetLoadRange(ZSetLoadRangeReq) returns (ZSetLoadRangeResp);

  rpc ZSetLoadRevRange(ZSetLoadRangeReq) returns (ZSetLoadRangeResp);

  rpc ZSetGetScore(ZSetReq) returns (ZSetGetScoreResp);

  rpc ZSetUpdateScore(ZSetUpdateScoreReq) returns (CommonResp);

  rpc ZSetDel(ZSetReq) returns (CommonResp);

  rpc ZSetDelAll(ZSetReq) returns (CommonResp);

  rpc ZSetGetRank(ZSetReq) returns (ZSetGetRankResp);

  rpc ZSetGetRevRank(ZSetReq) returns (ZSetGetRankResp);

  rpc ZSetRefreshRank(ZSetRefreshRankReq) returns (CommonResp);
}

// zset
message ZSetLoadRangeReq {
  int32  From    = 1;
  int32  To      = 2;
  string SetName = 3;
  int32  GameId  = 4;
}

message ZSetRangeData {
  string Key   = 1;
  int64  Score = 2;
}

message ZSetLoadRangeResp {
  repeated ZSetRangeData Rank = 1;
}

message ZSetReq {
  string SetName = 1;
  string Key     = 2;
  int32  GameId  = 3;
}

message ZSetGetScoreResp {
  int64 Score  = 1;
  int32 GameId = 2;
}

message ZSetUpdateScoreReq {
  int64  Score   = 1;
  string SetName = 2;
  string Key     = 3;
  int32  GameId  = 4;
}

message ZSetGetRankResp {
  string Key   = 1;
  int64  Score = 2;
  int64  Rank  = 3;
}

message ZSetRefreshRankReq {
  int64  Delta   = 1;
  string SetName = 2;
  string Key     = 3;
  int32  GameId  = 4;
}


// list
message HListReq {
  string Item     = 1;
  string Key      = 2;
  string ListName = 3;
  int32  GameId   = 4;
}

message HListLoadResp {
  repeated string Items = 1;
}

message HListLoadRangeReq {
  int32  From     = 1;
  int32  To       = 2;
  string Key      = 3;
  string ListName = 4;
  int32  GameId   = 5;
}

message HListPopResp {
  string Value = 1;
}

///////////////////////////////////////////
message CommonResp {
}

message KeyValue {
  string Key   = 1 [(gogoproto.moretags)='form:"Key" validate:"required"'];
  string value = 2 [(gogoproto.moretags)='form:"value" validate:"required"'];
}

message UpdateKeyValuesReq {
  int32     GameID         = 1;
  repeated  KeyValue Items = 2;
}

message LoadValuesReq {
  int32    GameID      = 1;
  repeated string Keys = 2;
}

message LoadValuesResp {
  repeated KeyValue Items = 1;
}

message SetExpireReq {
  string Key  = 1;
  int64  Time = 2; // 单位：秒
}

message LoadExpireReq {
  string Key = 1;
}

message LoadExpireResp {
  string Key  = 1;
  int64  Time = 2; // 单位：秒
}

message IncrGameDataReq {
  int32  GameId   = 1;
  int32  GroupId  = 2;
  string Key      = 3;
  int64  Value    = 4;
  string HashName = 5;
  string ServerId = 6;
}

message LoadGameDataReq {
  int32  GameId   = 1;
  int32  GroupId  = 2;
  string Key      = 3;
  string HashName = 4;
  string ServerId = 5;
}

message LoadGameDataResp {
  int32  GameId   = 1;
  int32  GroupId  = 2;
  string Key      = 3;
  int64  Value    = 4;
  string HashName = 5;
  string ServerId = 6;
}

// set
message SetReq {
  int32  GameId  = 1;
  string SetName = 2;
  string Item    = 3;
}

message SetMembersResp {
  repeated string Members = 1;
}

message SetRandomReq {
  int32  GameId  = 1;
  string SetName = 2;
  int64  Count   = 3;
}

message SetRandomResp {
  repeated string Members = 1;
}

message SetIsMemberResp {
  bool IsMember = 1;
}

// hash

message HSetUpdateReq {
  KeyValue Item     = 1;
  string   HashName = 2;
  int32    GameId   = 3;
}

message HSetLoadReq {
  string Key      = 1;
  string HashName = 2;
  int32  GameId   = 3;
}

message HSetLoadResp {
  KeyValue Item = 1;
}

message HSetDelReq {
  string Key      = 1;
  string HashName = 2;
  int32  GameId   = 3;
}

message HSetUpdateValuesReq {
  repeated KeyValue Items = 1;
  string   HashName       = 2;
  int32    GameId         = 3;
}

message HSetLoadValuesReq {
  repeated string Keys = 1;
  string   HashName    = 2;
  int32    GameId      = 3;
}

message HSetLoadValuesResp {
  repeated KeyValue Items = 1;
}

message HSetDelValuesReq {
  repeated string Keys = 1;
  string   HashName    = 2;
  int32    GameId      = 3;
}

message HSetDelHashReq {
  string HashName = 1;
  int32  GameId   = 2;
}

message HSetAddReq {
  KeyValue Item     = 1;
  string   HashName = 2;
  int32    GameId   = 3;
}

message HSetIncrReq {
  KeyValue Item     = 1;
  string   HashName = 2;
  int32    GameId   = 3;
}

message UpdateGameArenaReq {
  GameArena GameArena = 1;
}

message UpdateGameArenaResp {

}

message GetGameArenaReq {

}

message GetGameArenaResp {
  repeated GameArena GameArenas = 1;
  int64 TimeStamp = 2;
}

message DeleteGameArenaReq {
  GameArena GameArena = 1;
}

message DeleteGameArenaResp {

}

message GameArena {
  int32 GameId = 1;
  int32 GroupId = 2;
  string ArenaInfo = 3;
  string ExtraData = 4;
  int32 MatchId = 5;
}

message LoadGameAvoidInjuryReq {
  int64 gameId = 1;
}

message LoadGameAvoidInjuryResp {
  map<string, AvoidHurtMap> proxyMap = 1;
}

message AvoidHurtMap {
  int64 gameId = 1;
  string name = 2;
  string desc = 3;
  int64 type = 4;
  map<string, AvoidHurt> avoidHurtMap = 10;
}

message AvoidHurt {
  int64 left = 1;
  int64 right = 2;
  int64 extra = 3;
}

//////////////////
