// Code generated by protoc-gen-bm v0.1, DO NOT EDIT.
// source: api.proto

/*
Package api is a generated blademaster stub package.
This code was generated with kratos/tool/protobuf/protoc-gen-bm v0.1.

package 命名使用 {appid}.{version} 的方式, version 形如 v1, v2 ..

It is generated from these files:
	api.proto
*/
package api

import (
	"context"

	bm "github.com/go-kratos/kratos/pkg/net/http/blademaster"
	"github.com/go-kratos/kratos/pkg/net/http/blademaster/binding"
)
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

// to suppressed 'imported but not used warning'
var _ *bm.Context
var _ context.Context
var _ binding.StructValidator

var PathWorldPing = "/world.service.v1.world/Ping"
var PathWorldSayHello = "/world.service.v1.world/SayHello"
var PathWorldSayHelloURL = "/world/say_hello"
var PathWorldOnRedisDemo = "/world/OnRedisDemo"
var PathWorldOnMysqlDemo = "/world/OnMysqlDemo"
var PathWorldOnGenerateRoomNums = "/world/OnGenerateRoomNums"
var PathWorldOnApplyCustomRoomNum = "/world/OnApplyCustomRoomNum"
var PathWorldOnDisbandCustomRoomNum = "/world/OnDisbandCustomRoomNum"

// WorldBMServer is the server API for World service.
type WorldBMServer interface {
	Ping(ctx context.Context, req *google_protobuf1.Empty) (resp *google_protobuf1.Empty, err error)

	SayHello(ctx context.Context, req *HelloReq) (resp *google_protobuf1.Empty, err error)

	SayHelloURL(ctx context.Context, req *HelloReq) (resp *HelloResp, err error)

	OnRedisDemo(ctx context.Context, req *RedisDemoReq) (resp *RedisDemoResp, err error)

	OnMysqlDemo(ctx context.Context, req *MysqlDemoReq) (resp *MysqlDemoResp, err error)

	// room Number generate
	OnGenerateRoomNums(ctx context.Context, req *GenerateRoomNumsReq) (resp *GenerateRoomNumsRsp, err error)

	OnApplyCustomRoomNum(ctx context.Context, req *ApplyCustomRoomNumReq) (resp *ApplyCustomRoomNumRsp, err error)

	OnDisbandCustomRoomNum(ctx context.Context, req *DisbandCustomRoomReq) (resp *DisbandCustomRoomRsp, err error)
}

var WorldSvc WorldBMServer

func worldPing(c *bm.Context) {
	p := new(google_protobuf1.Empty)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.Ping(c, p)
	c.JSON(resp, err)
}

func worldSayHello(c *bm.Context) {
	p := new(HelloReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.SayHello(c, p)
	c.JSON(resp, err)
}

func worldSayHelloURL(c *bm.Context) {
	p := new(HelloReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.SayHelloURL(c, p)
	c.JSON(resp, err)
}

func worldOnRedisDemo(c *bm.Context) {
	p := new(RedisDemoReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnRedisDemo(c, p)
	c.JSON(resp, err)
}

func worldOnMysqlDemo(c *bm.Context) {
	p := new(MysqlDemoReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnMysqlDemo(c, p)
	c.JSON(resp, err)
}

func worldOnGenerateRoomNums(c *bm.Context) {
	p := new(GenerateRoomNumsReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnGenerateRoomNums(c, p)
	c.JSON(resp, err)
}

func worldOnApplyCustomRoomNum(c *bm.Context) {
	p := new(ApplyCustomRoomNumReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnApplyCustomRoomNum(c, p)
	c.JSON(resp, err)
}

func worldOnDisbandCustomRoomNum(c *bm.Context) {
	p := new(DisbandCustomRoomReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnDisbandCustomRoomNum(c, p)
	c.JSON(resp, err)
}

// RegisterWorldBMServer Register the blademaster route
func RegisterWorldBMServer(e *bm.Engine, server WorldBMServer) {
	WorldSvc = server
	e.GET("/world.service.v1.world/Ping", worldPing)
	e.GET("/world.service.v1.world/SayHello", worldSayHello)
	e.GET("/world/say_hello", worldSayHelloURL)
	e.POST("/world/OnRedisDemo", worldOnRedisDemo)
	e.POST("/world/OnMysqlDemo", worldOnMysqlDemo)
	e.POST("/world/OnGenerateRoomNums", worldOnGenerateRoomNums)
	e.POST("/world/OnApplyCustomRoomNum", worldOnApplyCustomRoomNum)
	e.POST("/world/OnDisbandCustomRoomNum", worldOnDisbandCustomRoomNum)
}
