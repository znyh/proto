// Code generated by protoc-gen-bm v0.1, DO NOT EDIT.
// source: api.proto

/*
Package api is a generated blademaster stub package.
This code was generated with kratos/tool/protobuf/protoc-gen-bm v0.1.

package 命名使用 {appid}.{version} 的方式, version 形如 v1, v2 ..

It is generated from these files:
	api.proto
*/
package api

import (
	"context"

	bm "github.com/go-kratos/kratos/pkg/net/http/blademaster"
	"github.com/go-kratos/kratos/pkg/net/http/blademaster/binding"
)
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

// to suppressed 'imported but not used warning'
var _ *bm.Context
var _ context.Context
var _ binding.StructValidator

var PathAccountGuestRegister = "account/GuestRegister"
var PathAccountRobotRegister = "account/RobotRegister"
var PathAccountGetGuest = "account/GetGuest"
var PathAccountBindTel = "account/BindTel"
var PathAccountUnbindTel = "account/UnbindTel"
var PathAccountGetSmsToken = "account/GetSmsToken"
var PathAccountVerifySmsToken = "account/VerifySmsToken"
var PathAccountModifySmsToken = "account/ModifySmsToken"
var PathAccountGetSmsTokenInfo = "account/GetSmsTokenInfo"
var PathAccountGetBindFlag = "account/GetBindFlag"
var PathAccountLoadBind = "account/LoadBind"
var PathAccountSetUserInfo = "/account/SetUserInfo"
var PathAccountLoadUser = "/account/LoadUser"
var PathAccountBatchLoadUser = "/account/BatchLoadUser"

// AccountBMServer is the server API for Account service.
type AccountBMServer interface {
	// 注册账号
	GuestRegister(ctx context.Context, req *RegisterReq) (resp *RegisterRsp, err error)

	// 注册机器人账户
	RobotRegister(ctx context.Context, req *RobotRegisterReq) (resp *RobotRegisterRsp, err error)

	// 获取账户信息
	GetGuest(ctx context.Context, req *GetGuestReq) (resp *GetGuestRsp, err error)

	// 绑定手机号
	BindTel(ctx context.Context, req *BindTelReq) (resp *google_protobuf1.Empty, err error)

	// 解绑手机
	UnbindTel(ctx context.Context, req *UnbindTelReq) (resp *google_protobuf1.Empty, err error)

	// 获取短信验证码
	GetSmsToken(ctx context.Context, req *GetSmsTokenReq) (resp *GetSmsTokenRsp, err error)

	// 校检短信验证
	VerifySmsToken(ctx context.Context, req *VerifySmsTokenReq) (resp *google_protobuf1.Empty, err error)

	// 修改验证码有效时间
	ModifySmsToken(ctx context.Context, req *ModifySmsTokenReq) (resp *google_protobuf1.Empty, err error)

	// 获取验证码信息
	GetSmsTokenInfo(ctx context.Context, req *GetSmsTokenInfoReq) (resp *GetSmsTokenInfoRsp, err error)

	// 获取绑定标志
	GetBindFlag(ctx context.Context, req *GetBindFlagReq) (resp *GetBindFlagRsp, err error)

	// 加载绑定信息
	LoadBind(ctx context.Context, req *LoadBindReq) (resp *LoadBindRsp, err error)

	// 设置用户属性集
	SetUserInfo(ctx context.Context, req *SetUserInfoReq) (resp *SetUserInfoRsp, err error)

	// 查询用户指定属性集
	LoadUser(ctx context.Context, req *LoadUserReq) (resp *LoadUserRsp, err error)

	// 批量查询用户指定属性集
	BatchLoadUser(ctx context.Context, req *BatchLoadUserReq) (resp *BatchLoadUserRsp, err error)
}

var AccountSvc AccountBMServer

func accountGuestRegister(c *bm.Context) {
	p := new(RegisterReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AccountSvc.GuestRegister(c, p)
	c.JSON(resp, err)
}

func accountRobotRegister(c *bm.Context) {
	p := new(RobotRegisterReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AccountSvc.RobotRegister(c, p)
	c.JSON(resp, err)
}

func accountGetGuest(c *bm.Context) {
	p := new(GetGuestReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AccountSvc.GetGuest(c, p)
	c.JSON(resp, err)
}

func accountBindTel(c *bm.Context) {
	p := new(BindTelReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AccountSvc.BindTel(c, p)
	c.JSON(resp, err)
}

func accountUnbindTel(c *bm.Context) {
	p := new(UnbindTelReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AccountSvc.UnbindTel(c, p)
	c.JSON(resp, err)
}

func accountGetSmsToken(c *bm.Context) {
	p := new(GetSmsTokenReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AccountSvc.GetSmsToken(c, p)
	c.JSON(resp, err)
}

func accountVerifySmsToken(c *bm.Context) {
	p := new(VerifySmsTokenReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AccountSvc.VerifySmsToken(c, p)
	c.JSON(resp, err)
}

func accountModifySmsToken(c *bm.Context) {
	p := new(ModifySmsTokenReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AccountSvc.ModifySmsToken(c, p)
	c.JSON(resp, err)
}

func accountGetSmsTokenInfo(c *bm.Context) {
	p := new(GetSmsTokenInfoReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AccountSvc.GetSmsTokenInfo(c, p)
	c.JSON(resp, err)
}

func accountGetBindFlag(c *bm.Context) {
	p := new(GetBindFlagReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AccountSvc.GetBindFlag(c, p)
	c.JSON(resp, err)
}

func accountLoadBind(c *bm.Context) {
	p := new(LoadBindReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AccountSvc.LoadBind(c, p)
	c.JSON(resp, err)
}

func accountSetUserInfo(c *bm.Context) {
	p := new(SetUserInfoReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AccountSvc.SetUserInfo(c, p)
	c.JSON(resp, err)
}

func accountLoadUser(c *bm.Context) {
	p := new(LoadUserReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AccountSvc.LoadUser(c, p)
	c.JSON(resp, err)
}

func accountBatchLoadUser(c *bm.Context) {
	p := new(BatchLoadUserReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AccountSvc.BatchLoadUser(c, p)
	c.JSON(resp, err)
}

// RegisterAccountBMServer Register the blademaster route
func RegisterAccountBMServer(e *bm.Engine, server AccountBMServer) {
	AccountSvc = server
	e.POST("account/GuestRegister", accountGuestRegister)
	e.POST("account/RobotRegister", accountRobotRegister)
	e.POST("account/GetGuest", accountGetGuest)
	e.POST("account/BindTel", accountBindTel)
	e.POST("account/UnbindTel", accountUnbindTel)
	e.POST("account/GetSmsToken", accountGetSmsToken)
	e.POST("account/VerifySmsToken", accountVerifySmsToken)
	e.POST("account/ModifySmsToken", accountModifySmsToken)
	e.POST("account/GetSmsTokenInfo", accountGetSmsTokenInfo)
	e.POST("account/GetBindFlag", accountGetBindFlag)
	e.POST("account/LoadBind", accountLoadBind)
	e.POST("/account/SetUserInfo", accountSetUserInfo)
	e.POST("/account/LoadUser", accountLoadUser)
	e.POST("/account/BatchLoadUser", accountBatchLoadUser)
}
