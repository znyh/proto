// 定义项目 API 的 proto 文件 可以同时描述 gRPC 和 HTTP API
// protobuf 文件参考:
//  - https://developers.google.com/protocol-buffers/
syntax = "proto3";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/protobuf/empty.proto";
import "google/api/annotations.proto";

// package 命名使用 {appid}.{version} 的方式, version 形如 v1, v2 ..
package account.service.v1;

// NOTE: 最后请删除这些无用的注释 (゜-゜)つロ

option go_package = "api";
option (gogoproto.goproto_getters_all) = false;


service Account {

    //注册账号
    rpc GuestRegister (RegisterReq) returns (RegisterRsp){
        option (google.api.http) = {
            post:"account/GuestRegister"
        };
    };

    //注册机器人账户
    rpc RobotRegister(RobotRegisterReq) returns (RobotRegisterRsp){
        option (google.api.http) = {
             post:"account/RobotRegister"
         };
    }

    //获取账户信息
    rpc GetGuest (GetGuestReq) returns (GetGuestRsp){
        option (google.api.http) = {
             post:"account/GetGuest"
         };
    };


    //绑定手机号
    rpc BindTel (BindTelReq) returns (.google.protobuf.Empty){
        option (google.api.http) = {
            post:"account/BindTel"
        };
    };

    //解绑手机
    rpc UnbindTel (UnbindTelReq) returns (.google.protobuf.Empty){
        option (google.api.http) = {
            post:"account/UnbindTel"
        };
    };

    //获取短信验证码
    rpc GetSmsToken (GetSmsTokenReq) returns (GetSmsTokenRsp){
        option (google.api.http) = {
            post:"account/GetSmsToken"
        };
    };

    //校检短信验证
    rpc VerifySmsToken(VerifySmsTokenReq) returns (.google.protobuf.Empty){
         option (google.api.http) = {
                post:"account/VerifySmsToken"
          };
    };

    //修改验证码有效时间
    rpc ModifySmsToken(ModifySmsTokenReq) returns (.google.protobuf.Empty){
         option (google.api.http) = {
                post:"account/ModifySmsToken"
          };
    };


    //获取验证码信息
    rpc GetSmsTokenInfo(GetSmsTokenInfoReq) returns (GetSmsTokenInfoRsp){
        option (google.api.http) = {
                post:"account/GetSmsTokenInfo"
          };
    };

     //获取绑定标志
     rpc GetBindFlag (GetBindFlagReq) returns (GetBindFlagRsp){
         option (google.api.http) = {
             post:"account/GetBindFlag"
         };
     };

    //加载绑定信息
    rpc LoadBind(LoadBindReq) returns (LoadBindRsp) {
        option (google.api.http) = {
            post:"account/LoadBind"
        };
    };

   // 设置用户属性集
    rpc SetUserInfo (SetUserInfoReq) returns (SetUserInfoRsp) {
        option(google.api.http) = {
            post:"/account/SetUserInfo"
        };
    };

    // 查询用户指定属性集
    rpc LoadUser (LoadUserReq) returns (LoadUserRsp) {
        option(google.api.http) = {
            post:"/account/LoadUser"
        };
    };

    // 批量查询用户指定属性集
    rpc BatchLoadUser (BatchLoadUserReq) returns (BatchLoadUserRsp) {
        option(google.api.http) = {
            post:"/account/BatchLoadUser"
        };
    };
}

// 注册账号
message RegisterReq{
    string Nick                  = 1[(gogoproto.moretags)='form:"Nick" validate:"required"'];
    string Password              = 2[(gogoproto.moretags)='form:"Password" validate:"required"'];
    string Telephone             = 3;
	int32 OS                     = 4;
}
message RegisterRsp{
    UserInfo info                = 1;
}

// 注册机器人账户
message RobotRegisterReq{
    int32  Number               = 1[(gogoproto.moretags)='form:"Number" validate:"required"'];
}
message RobotRegisterRsp{
    repeated int64  RobotIDs    = 1[(gogoproto.moretags)='form:"RobotIDs" validate:"required"'];
}


//获取账户信息请求
message GetGuestReq {
    int64   UserID       = 1[(gogoproto.moretags)='form:"UserID"'];
}

message GetGuestRsp {
    string  Nick    = 1;
    string  Pwd     = 2;
    int64   UserId  = 3;
    string  RegDate = 4;
}

// 绑定手机号
message BindTelReq {
    int64   UserID      = 1[(gogoproto.moretags)='form:"UserID"'];
    string  Tel         = 2[(gogoproto.moretags)='form:"Tel" validate:"required"'];
    string  SmsToken    = 3[(gogoproto.moretags)='form:"SmsToken" validate:"required"'];
}

// 绑定手机号
message UnbindTelReq {
    int64   UserID    = 1[(gogoproto.moretags)='form:"UserID"'];
}


//获取短信验证码
message GetSmsTokenReq {
    int64   UserID      = 1[(gogoproto.moretags)='form:"UserID"'];
    string  Tel         = 2[(gogoproto.moretags)='form:"Tel" validate:"required"'];
    SMS     Type        = 3;
}

message GetSmsTokenRsp {
    string  SmsToken    = 1;
}

//验证码类型
enum SMS {
    Bind    = 0;        //绑定
    Give    = 1;        //赠送
    OTP     = 2;        //otp
}


//校检短信验证
message VerifySmsTokenReq{
    int64   UserID      = 1;
    string  SmsToken    = 2;
    SMS     Type        = 3;
}

//修改验证码有效时间
message ModifySmsTokenReq{
    int64   UserID      = 1;
    int32   MinTime     = 2;        //低于最小时间就设置重置时间
    int32   ResetTime   = 3;        //重置时间为0，删除验证码
    SMS     Type        = 4;
}

//获取验证码信息
message GetSmsTokenInfoReq{
    int64   UserID      = 1;
    SMS     Type        = 2;
}

message GetSmsTokenInfoRsp{
    string  SmsToken    = 1;
    string  Tel         = 2;
    int64   ValidTime   = 3;
}


//获取绑定标志
message GetBindFlagReq {
    int64   UserID    = 1[(gogoproto.moretags)='form:"UserID"'];
}

//获取绑定标志
message GetBindFlagRsp {
    repeated int32       Flag    = 1;
}


//加载绑定信息
message LoadBindReq{
    int64   UserID      = 1;
}

message LoadBindRsp{
    int64   UserID      = 1;
    string  Tel         = 2;
    string  FaceBook    = 3;
    string  Line        = 4;
}

//用户信息 nick, password, telephone string, OS int32
message UserInfo {
    string Nick           = 1;
    string Password       = 2;
    string Telephone      = 3;
    int32 OS              = 4;          // 1.Invalid 2.Android 3.IOS 4.IOS_Trial 5.PC
    int32 Sex             = 5;

    int64 UserID          = 6;
    string HealUrl        = 7;
    string City           = 8;
    string Birth          = 9;
    int32 Age             = 10;
    bool Online           = 11;
    string CreateTime     = 12;
    string LastLoginTime  = 13;
    bool IsRobot          = 14;
}

//设置用户属性集
message SetUserInfoReq{
    int64 UserID = 1;                          // 用户id
    map<string, string> info = 2;              // 用户信息
}
message SetUserInfoRsp{
}

//查询用户指定属性集
message LoadUserReq{
    int64 UserID = 1;                          // 用户id
}
message LoadUserRsp {
    UserInfo info = 1;
}


//批量查询用户指定属性集
message BatchLoadUserReq{
    repeated int64 UserIDs = 1;			       // 用户ID集
}
message BatchLoadUserRsp {
    map<int64, UserInfo> Users = 1;           // 查询用户属性结果集
}